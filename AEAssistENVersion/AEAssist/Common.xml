<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="T:Common.Define.SpellTargetType">
            <summary>
            技能目标代名词
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.DefaultByCode">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Self">
            <summary>
            自己
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Target">
            <summary>
            当前目标
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.TargetTarget">
            <summary>
            当前目标的目标
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Pm1">
            <summary>
            小队列表1
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Pm2">
            <summary>
            小队列表2
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Pm3">
            <summary>
            小队列表3
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Pm4">
            <summary>
            小队列表4
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Pm5">
            <summary>
            小队列表5
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Pm6">
            <summary>
            小队列表6
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Pm7">
            <summary>
            小队列表7
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Pm8">
            <summary>
            小队列表8
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.SpecifyTarget">
            <summary>
            特殊目标 对应oid
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.Location">
            <summary>
            地点
            </summary>
        </member>
        <member name="F:Common.Define.SpellTargetType.DynamicsTarget">
            <summary>
            动态目标 实时计算的目标 需要设置回调
            </summary>
        </member>
        <member name="M:Common.GUI.ImGuiHelper.IsRightMouseClicked">
            右键点击
        </member>
        <member name="P:Common.IEntry.Name">
            <summary>
            显示的插件名
            </summary>
        </member>
        <member name="M:Common.IEntry.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:Common.IEntry.DrawEntrySetting">
            <summary>
            在主界面上显示的内容
            </summary>
        </member>
        <member name="M:Common.IEntry.DrawUi">
            <summary>
            你自己模块的显示内容(需要点击Show按钮才会出来)
            </summary>
        </member>
        <member name="M:Common.IEntry.HandleChat(System.Int32,System.String)">
            <summary>
            处理聊天
            </summary>
            <param name="type"></param>
            <param name="content"></param>
        </member>
        <member name="M:Common.IEntry.ResetLanguage(Common.Language.Language)">
            <summary>
            多语言重置了
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Common.IMemApiBuff.IsPotted">
            <summary>
            是否有强化药状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.MemoryApi.IMemApiFunctionPointer">
            <summary>
            一些游戏函数指针，有些会做一些处理
            </summary>
        </member>
        <member name="M:Common.MemoryApi.IMemApiFunctionPointer.GetActionData(System.UInt32)">
            <summary>
            与lumina的action表内容无异，exd的调用
            </summary>
            <param name="actionId">技能id</param>
            <returns>结构体指针</returns>
        </member>
        <member name="M:Common.MemoryApi.IMemApiFunctionPointer.CheckActionCanUse(System.UInt32)">
            <summary>
            进行处理过的函数，仿的游戏GetActionState函数返回572的具体实现。猜测查表计算是否满足技能的前置要求
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="M:Common.MemoryApi.IMemApiFunctionPointer.IsCanQueue(System.UInt32)">
            <summary>
            不是属性，大概是以当前的状态技能是否能写进技能队列。反正返回true就写内存了 就那么叫吧
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="T:Common.IMemApiSpell">
            <summary>
            技能相关的一些api
            </summary>
        </member>
        <member name="M:Common.IMemApiSpell.GetLastComboSpellId">
            <summary>
            获取连击技能的id
            有些时候即使无连击状态还是会返回最后的连击技能
            </summary>
            <returns>技能ID</returns>
        </member>
        <member name="M:Common.IMemApiSpell.IsReady(System.UInt32)">
            <summary>
            简单判断技能是否解锁和蓝量是否足够技能使用。
            </summary>
            <param name="id">技能id</param>
            <returns>返回true如果技能准备好了，否则false</returns>
        </member>
        <member name="M:Common.IMemApiSpell.GetActionRange(System.UInt32)">
            <summary>
            获取技能释放距离
            </summary>
            <param name="id">技能id</param>
            <returns>距离</returns>
        </member>
        <member name="M:Common.IMemApiSpell.HotBarSlotHasAction(System.UInt32)">
            <summary>
            扫描热键栏是否有某一个技能
            </summary>
            <param name="id">技能id</param>
            <returns></returns>
        </member>
        <member name="M:Common.IMemApiSpell.NinjutsuIsWhat">
            <summary>
            可以理解为当前可用忍术
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.IMemApiSpell.CheckActionChange(System.UInt32)">
            <summary>
            获取会变化的技能的当前id（包括但不限于因等级而变化的技能、无法放置在热键栏的技能）
            参数应当使用这些技能最原始的技能id。
            </summary>
            <param name="spellId">技能id</param>
            <returns></returns>
        </member>
        <member name="M:Common.IMemApiSpell.GetGCDDuration(System.Boolean)">
            <summary>
            总cd (ms)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.IMemApiSpell.GetElapsedGCD">
            <summary>
            已经转了多久 (ms)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Common.IMemApiSpell.IsAnimationLock">
            <summary>
            动画锁
            </summary>
        </member>
        <member name="M:Common.IMemApiSpell.GetActionState(System.UInt32)">
            <summary>
            可能是获取技能状态 FFXIVClientStructs.FFXIV.Client.Game.ActionManager.GetActionState
            </summary>
            <param name="id">技能id</param>
            <returns>返回的可能是位状态标记，但是还不确定。已知的返回值可能 572-技能是暗的（一些需要前置的技能） 580-读条中（高优先级） 582-冷却在转（次优先级）568-mp不够 574-职业不对 0-一般认为技能可用</returns>
        </member>
        <member name="M:Common.IMemApiSpell.GetActionInRangeOrLoS(System.UInt32)">
            <summary>
            FFXIVClientStructs.FFXIV.Client.Game.ActionManager.GetActionInRangeOrLoS
            原函数还有两个参数 简化成自己和当前目标
            </summary>
            <param name="actionId">技能id</param>
            <returns>返回的可能是位状态标记，但是还不确定。已知的返回值可能 566-超过距离</returns>
        </member>
        <member name="T:Common.IMemApiSummoner">
            <summary>
            召唤量谱相关api
            </summary>
        </member>
        <member name="P:Common.IMemApiSummoner.TranceTimer">
            <summary>
            AttunmentTimerRemaining属性剩余时间
            </summary>
        </member>
        <member name="P:Common.IMemApiSummoner.Aetherflow">
            <summary>
            Aetherflow以太超流层数
            </summary>
        </member>
        <member name="M:Common.IMemApiSummoner.IsPetReady(Common.ActivePetType)">
            <summary>
            是否可以变身
            </summary>
            <param name="activePetType"></param>
            <returns></returns>
        </member>
        <member name="P:Common.IMemApiSummoner.PetTimer">
            <summary>
            SummonTimerRemaining召唤兽剩余时间
            </summary>
        </member>
        <member name="P:Common.IMemApiSummoner.ElementalAttunement">
            <summary>
            Attunement属性以太层数
            </summary>
        </member>
        <member name="P:Common.IMemApiSummoner.ActivePetType">
            <summary>
            在场召唤兽类别
            </summary>
        </member>
        <member name="P:Common.IMemApiSummoner.HasPet">
            <summary>
            是否有宝石兽
            </summary>
        </member>
    </members>
</doc>
